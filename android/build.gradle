buildscript {
	repositories {
		mavenLocal()
		mavenCentral()
		maven {
			url "https://oss.sonatype.org/content/repositories/snapshots/"
		}
		jcenter()
		google()
	}
	dependencies {
		classpath "com.github.dcendents:android-maven-gradle-plugin:1.4.1"
		classpath "com.android.tools.build:gradle:3.0.1"
	}
}

apply plugin: "com.android.library"

configurations {
	natives
}

dependencies {
	compile project(':core')
	annotationProcessor "java-oo:javac8-oo-plugin:0.5"
	annotationProcessor "org.projectlombok:lombok:1.16.20"
	testAnnotationProcessor "java-oo:javac8-oo-plugin:0.5"
	testAnnotationProcessor "org.projectlombok:lombok:1.16.20"
	compile "com.badlogicgames.gdx:gdx-backend-android:$gdxVersion"
	compile "com.badlogicgames.gdx:gdx-freetype:$gdxVersion"
	compile "com.github.jrvansuita:PickImage:2.1.6"
}

android {
	buildToolsVersion '26.0.2'
	compileSdkVersion 25
	sourceSets {
		main {
			manifest.srcFile 'AndroidManifest.xml'
			java.srcDirs = ["src"]
			aidl.srcDirs = ["src"]
			renderscript.srcDirs = ["src"]
			res.srcDirs = ["res"]
			assets.srcDirs = ["assets"]
			jniLibs.srcDirs = ["libs"]
		}

		instrumentTest.setRoot("tests")
	}
	packagingOptions {
		exclude "META-INF/robovm/ios/robovm.xml"
	}
	defaultConfig {
		minSdkVersion 19
		targetSdkVersion 25
	}
	compileOptions {
		sourceCompatibility JavaVersion.VERSION_1_8
		targetCompatibility JavaVersion.VERSION_1_8
	}
	lintOptions {
		abortOnError false
	}
}

// called every time gradle gets executed, takes the native dependencies of
// the natives configuration, and extracts them to the proper libs/ folders
// so they get packed with the APK.
task copyAndroidNatives() {
	file("libs/armeabi/").mkdirs()
	file("libs/armeabi-v7a/").mkdirs()
	file("libs/arm64-v8a/").mkdirs()
	file("libs/x86_64/").mkdirs()
	file("libs/x86/").mkdirs()

	configurations.natives.files.each { jar ->
		def outputDir = null
		if (jar.name.endsWith("natives-arm64-v8a.jar")) outputDir = file("libs/arm64-v8a")
		if (jar.name.endsWith("natives-armeabi-v7a.jar")) outputDir = file("libs/armeabi-v7a")
		if (jar.name.endsWith("natives-armeabi.jar")) outputDir = file("libs/armeabi")
		if (jar.name.endsWith("natives-x86_64.jar")) outputDir = file("libs/x86_64")
		if (jar.name.endsWith("natives-x86.jar")) outputDir = file("libs/x86")
		if (outputDir != null) {
			copy {
				from zipTree(jar)
				into outputDir
				include "*.so"
			}
		}
	}
}