apply plugin: "com.android.application"

configurations {
	natives
}

dependencies {
	compile project(':test')
	compile project(':android')
	compile "com.android.support:support-v4:25.2.0"
	annotationProcessor "java-oo:javac8-oo-plugin:0.5"
	annotationProcessor "org.projectlombok:lombok:1.16.20"
	natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi"
	natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi-v7a"
	natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-arm64-v8a"
	natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-x86"
	natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-x86_64"
	compile "com.badlogicgames.gdx:gdx-freetype:$gdxVersion"
}

android {
	compileSdkVersion 25
	sourceSets {
		main {
			manifest.srcFile 'AndroidManifest.xml'
			java.srcDirs = ["src"]
			aidl.srcDirs = ["src"]
			renderscript.srcDirs = ["src"]
			res.srcDirs = ["res"]
			assets.srcDirs = ["assets"]
			jniLibs.srcDirs = ["libs"]
		}

		instrumentTest.setRoot("tests")
	}
	packagingOptions {
		exclude "META-INF/robovm/ios/robovm.xml"
	}
	defaultConfig {
		applicationId "com.bypositivestudio.pixelmaker.test"
		minSdkVersion 16
		targetSdkVersion 25
	}
	compileOptions {
		sourceCompatibility JavaVersion.VERSION_1_8
		targetCompatibility JavaVersion.VERSION_1_8
	}
	lintOptions {
		abortOnError false
	}
}

// called every time gradle gets executed, takes the native dependencies of
// the natives configuration, and extracts them to the proper libs/ folders
// so they get packed with the APK.
task copyAndroidNatives() {
	file("libs/armeabi/").mkdirs()
	file("libs/armeabi-v7a/").mkdirs()
	file("libs/arm64-v8a/").mkdirs()
	file("libs/x86_64/").mkdirs()
	file("libs/x86/").mkdirs()

	configurations.natives.files.each { jar ->
		def outputDir = null
		if (jar.name.endsWith("natives-arm64-v8a.jar")) outputDir = file("libs/arm64-v8a")
		if (jar.name.endsWith("natives-armeabi-v7a.jar")) outputDir = file("libs/armeabi-v7a")
		if (jar.name.endsWith("natives-armeabi.jar")) outputDir = file("libs/armeabi")
		if (jar.name.endsWith("natives-x86_64.jar")) outputDir = file("libs/x86_64")
		if (jar.name.endsWith("natives-x86.jar")) outputDir = file("libs/x86")
		if (outputDir != null) {
			copy {
				from zipTree(jar)
				into outputDir
				include "*.so"
			}
		}
	}
}

task run(type: Exec) {
	def path
	def localProperties = project.file("../local.properties")
	if (localProperties.exists()) {
		Properties properties = new Properties()
		localProperties.withInputStream {
            properties.load(it)
		}
        path = properties.getProperty("sdk.dir") ?: "$System.env.ANDROID_HOME"
	} else {
		path = "$System.env.ANDROID_HOME"
	}

	def adb = path + "/platform-tools/adb"
	commandLine "$adb", "shell", "am", "start", "-n", "com.bypositivestudio.pixelmaker.test/com.bypositivestudio.pixelmaker.test.android.AndroidLauncher"
}