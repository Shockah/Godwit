apply plugin: "groovy"

dependencies {
	compile project(":godwit")
	compile "org.codehaus.groovy:groovy:$groovyVersion"
	compile "com.badlogicgames.gdx:gdx-backend-lwjgl3:$gdxVersion"
	compile "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
}

targetCompatibility = 1.7
sourceCompatibility = 1.7
[compileJava, compileTestJava, compileGroovy, compileTestGroovy]*.options*.encoding = "UTF-8"

sourceSets.main {
	java.srcDirs = []
	groovy.srcDirs = ["src"]
	resources.srcDirs = ["resources/dist"]
}

project.ext.package = "pl.shockah.godwit.test"
project.ext.mainClassName = "${project.package}.TestStarter"

void handleFiles(File baseDir, File file) {
	if (file.isDirectory()) {
		file.eachFile {
			handleFiles(baseDir, it)
		}
	} else if (file.name.endsWith(".groovy") || file.name.endsWith(".java")) {
		addTask(baseDir, file)
	}
}

void addTask(File baseDir, File file) {
	String extraPath = file.absolutePath.substring(baseDir.absolutePath.length())
	String className = extraPath.replace("\\", "/").split("\\.").dropRight(1).join(".")
	if (className.startsWith("/"))
		className = className.substring(1)
	className = className.replace("/", ".")
	String fullClassName = "${project.package}.test.$className"
	String justClassName = fullClassName.split("\\.").last()

	if (fullClassName.contains("\$"))
		return

	tasks.create("test$justClassName", JavaExec) {
		dependsOn "classes"

		main = project.mainClassName
		args fullClassName
		classpath = sourceSets.main.runtimeClasspath
		standardInput = System.in
		ignoreExitValue = true
		if (System.getProperty("os.name") == "Mac OS X")
			jvmArgs "-XstartOnFirstThread"
		//workingDir = project.assetsDir

		if (System.getProperty('DEBUG', 'false') == 'true') {
			jvmArgs '-Xdebug', '-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005'
			debug true
		}
	}
}

File baseDir = new File(project.file("."), "src/${mainClassName.split("\\.").dropRight(1).join("/")}/test/")
handleFiles(baseDir, baseDir)